# ------------------------------------------------

########      ######## ##          ##  ####  ######  ##    ##
##            ##       ##          ## ##  ##   ##   ####  ####
##            ##        ##        ##  ##  ##   ##   ## #### ##
##      ##### ##        ##   ##   ## ########  ##  ##   ##   ##
##            ##         ## #### ##  ##    ##  ##  ##        ##
##            ##         ####  #### ##      ## ## ##          ##
########      ##########  ##    ##  ##      ## ## ##          ##

# Climate - Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------


[OPTIONS]
#-------------------------------------------------------
# OPTION - to switch on/off 
#-------------------------------------------------------

# Data otions
# if temperature is stored in Kelvin instead Celsius
TemperatureInKelvin = True
# if lat/lon the area has to be user defined = precalculated
gridSizeUserDefined = True

# Reads in runoff, soil moisture, groundwater recharge, and open water evaporation
no_meteo = True

#-----------------------------------------------
# Irrigation and water demand

# if irrigation is included, otherwise paddy and non paddy is put into 'grassland'
includeIrrigation = True
# if False, all irrigation is nonpaddy (WARNING: Paddy irrigation not yet supported)
paddy_irrig = False
# if water demand from irrigation, industry and domestic is included
includeWaterDemand = True
# limit abstraction to available groundwater (True) include fossil groundwater (False)
limitAbstraction = False
# fossil water that is not consumed is not lost, but treated normally
fossil_water_treated_normally = True

# Environmental Flow
calc_environflow = False

#-----------------------------------------------
# Routing

# Turn off in CCWatM!!!, if runoff concentration to the edge of a cell is included, 
includeRunoffConcentration = False
# Waterbodies like lakes and reservoirs
includeWaterBodies = True
# kinematic wave routing, if False no routing is calculated
includeRouting = True

#-----------------------------------------------
# Inflow from outside of the modelled area
inflow = False

# --- Reporting & Debugging ------------------- ----------------------------------------------
# Reporting options
writeNetcdfStack = True
reportMap = True
reportTss = True 


#-------------------------------------------------------
# DEFINITIONS OF PARAMETERS
#-------------------------------------------------------

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------
PathRoot = /work/ch0636/projects/uwares/CWatM_input/CWatM-Earth-5min
#PathOut = /work/ch0636/g300114/model/modelruns/testruns_debugging/test_output
PathOut = /work/ch0636/g300116/CCWatM/test_reference
PathMaps = $(PathRoot)
PathMask = /work/ch0636/g300114/model/modelruns/testruns_2025_03/area_maps
PathMeteo = /work/ch0636/g300114/model/modelruns/testruns_debugging/test_forcing
PathWaterdemand = $(PathRoot)/landsurface/waterDemand

#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = Helmholtz-Zentrum Hereon
title = C-CWatM output
metaNetcdfFile = $(FILE_PATHS:PathMaps)/metaNetcdf.xml

#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# Area mask
# A pcraster map, tif or netcdf map e.g.  $(FILE_PATHS:PathRoot)/data/areamaps/area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 
MaskMap = $(FILE_PATHS:PathMask)/hybas_eu_lev03_finalselection_5arcmin.tif
#MaskMap = 31.189 31.268

#-------------------------------------------------------
# Station data 
# either a map e.g. $(FILE_PATHS:PathRoot)/data/areamaps/area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )
# Longitude Latitude -180 to 180, same as Earth Engine
Gauges = $(FILE_PATHS:PathMask)/hybas_eu_lev03_finalselection_5arcmin.tif

# if .tif file for gauges, this is a flag if the file is global or local
# e.g. Gauges = $(FILE_PATHS:PathRoot)/data/areamaps/gaugesRhine.tif
GaugesLocal = False

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart has to be a date e.g. 01/06/1990
# SpinUp or StepEnd either date or numbers 
# SpinUp: from this date output is generated (up to this day: warm up)

StepStart = 1/1/2000
SpinUp =  None
#SpinUp =  1/1/2000
StepEnd =  5/1/2000

#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

# for a warm start initial variables a loaded
# e.g for a start on 01/01/2010 load variable from 31/12/2009
load_initial = False
initLoad = $(FILE_PATHS:PathRoot)/init/Rhine_19891231.nc

# saving variables from this run, to initiate a warm start next run
# StepInit = saving date, can be more than one: 10/01/1973 20/01/1973
save_initial = False
initSave = inittest
StepInit = 31/12/1999

#-------------------------------------------------------
[COUPLING]
#-------------------------------------------------------

# flag to define type of coupling:
# no_coupl - input data is already provided on C-CWatM grid
# offline_coupl - read forcing data daily and convert to C-CWatM grid
coupl_flag = no_coupl

# ----- if 'no_coupl' is selected the following settings are not used -----
# model used for forcing/coupling
# list of models: remo
fmodel_flag = remo
# path where meteorological forcing data are stored in .nc format
PathForc = /work/ch0636/projects/uwares/CWatM_forcing/Remo_ERA5_27lev/daily_means
# (part of) filenames of forcing files
# runoff
RunoffName = $(COUPLING:PathForc)/e100001n*
# groundwater recharge
GWName = $(COUPLING:PathForc)/e100001n*
# evaporation over water
OWEName = $(COUPLING:PathForc)/e100001n*
# soil water content
SMName = $(COUPLING:PathForc)/e100001n*
# set flag if soil water content is in percent (and not in absolute values)
soilwater_as_fract = True

#-------------------------------------------------------
# INPUT NON-METEO TIMESERIES AS MAPS
#-------------------------------------------------------
[NO_METEO]
# runoff [m]
RunoffMaps = $(FILE_PATHS:PathMeteo)/runoff*
# Groundwater Recharge [m]
GWMaps = $(FILE_PATHS:PathMeteo)/sum_gwRecharge*
# daily reference evaporation (free water) [m]
OWEMaps = $(FILE_PATHS:PathMeteo)/EWRef*
# Soil Wetness (rootzone)
SMMaps = $(FILE_PATHS:PathMeteo)/rootzoneSM*

#-------------------------------------------------------
# CALIBARTION PARAMETERS
#-------------------------------------------------------
[CALIBRATION]

# These are parameter which are used for calibration
# could be any parameter, but for an easier overview, tehey are collected here
# in the calibration template a placeholder (e.g. %arnoBeta) instead of value

# arnoBeta_add = 0.1
arnoBeta_add = 0.19
# How much water should be applied for irrigation (default: 0.7, [0.5 - 1.0])
alphaDepl = 0.7
# groundwater recessionCoeff_factor = 1.0
recessionCoeff_factor = 5.278
#Routing manningsN Factor to Manning's roughness = 1.0 [0.1-10.]
manningsN = 1.86
# reservoir  normal storage limit (fraction of total storage, [-]) [0.15 - 0.85] default 0.5
normalStorageLimit = 0.44
# lake parameter - factor to alpha: parameter of of channel width and weir coefficient  [0.33 - 3.] dafault 1.
lakeAFactor = 0.33
# lake parameter - factor for wind evaporation
lakeEvaFactor = 1.52

#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)/routing/ldd.map

# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)/landsurface/topo/elvstd.map

# Area of pixel [m2] (for lat/lon every cell has a different area)
CellArea = $(FILE_PATHS:PathMaps)/landsurface/topo/cellarea.map


#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]
# precipitation [kg m-2 s-1]

# --------------------------------
# from kg m-2s-1 to m : 86.4
precipitation_coversion = 86.4
evaporation_coversion = 1.00


#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathSoil = $(FILE_PATHS:PathMaps)/soil_ccwatm

# soil properties
# soil storage capacity
wsp = $(PathSoil)/wsirr.nc
# field capacity
wfcp = $(PathSoil)/wfcirr.nc
#wilting point
wwpp = $(PathSoil)/wwpirr.nc

# Different constants
maxGWCapRise    = 5.0
minCropKC        = 0.2
minTopWaterLayer = 0.0

#-------------------------------------------------------
[LANDCOVER]
PathLandcover = $(FILE_PATHS:PathMaps)/landsurface

coverTypes = forest, grassland, irrPaddy, irrNonPaddy, sealed, water
#coverTypesShort = f, g, i, n, s, w
fractionLandcover = $(PathLandcover)/fractionLandcover.nc

# Landcover can vary from year to year
dynamicLandcover = True
# if landcover cannot vary, which year should be taken as fixed year
fixLandcoverYear = 1961

# Leftovers
forest_minInterceptCap  = 0.001
grassland_minInterceptCap  = 0.001



[__irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps)/landcover/irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values

irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0

irrPaddy_fracVegCover  = $(PathIrrPaddy)/fracVegCover.map
irrPaddy_rootFraction1 = $(PathIrrPaddy)/rootFraction1.map
irrPaddy_rootFraction2 = $(PathIrrPaddy)/rootFraction2.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)/maxRootDepth.map
irrPaddy_minSoilDepthFrac = $(PathIrrPaddy)/minSoilDepthFrac.map

irrPaddy_cropCoefficientNC = $(PathIrrPaddy)/cropCoefficientirrPaddy_10days.nc

# maximum flooding depth for paddy
irrPaddy_maxtopwater = 0.05

[__irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps)/landcover/irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values


irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0

irrNonPaddy_fracVegCover  = $(PathIrrNonPaddy)/fracVegCover.map
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)/rootFraction1.map
irrNonPaddy_rootFraction2 = $(PathIrrNonPaddy)/rootFraction2.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)/maxRootDepth.map
irrNonPaddy_minSoilDepthFrac = $(PathIrrNonPaddy)/minSoilDepthFrac.map


irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)/cropCoefficientirrNonPaddy_10days.nc

[__sealed]
PathSealed = $(FILE_PATHS:PathMaps)/landcover/sealed

sealed_minInterceptCap  = 0.001

# initial conditions: sealed_interceptStor


[__open_water]
PathWater = $(FILE_PATHS:PathMaps)/landcover/water

water_minInterceptCap  = 0.0

#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps)/groundwater

recessionCoeff = $(PathGroundwater)/recessionCoeff.map
# baseflow = recessionCoeff * storage groundwater
specificYield = $(PathGroundwater)/specificYield.map
kSatAquifer = $(PathGroundwater)/kSatAquifer.map
# both not used at the moment in groundwater modul, but already loaded

#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

# For water demand vs. availability: areas have to be aggregated
# Allocation map
allocSegments = $(FILE_PATHS:PathWaterdemand)/catchx.nc

# Demand in m/day [True] (default) or as mio m3 per year or month [False]
demand_unit = False

historicalIrrigationArea = $(FILE_PATHS:PathWaterdemand)/irrigationArea.nc

# Demand data monthly or yearly, as  m day-1 or mio m3 per month - here m3/year
domesticWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_dom_year_millionm3_5min_1961_2010.nc

# time = True for monthly, False for yearly
domesticTimeMonthly = False
# name of the variable Withrawal = Gross, consumption = Netto
domesticWithdrawalvarname = domWW
domesticConsuptionvarname = domCon

industryWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_ind_year_millionm3_5min_1961_2010.nc
industryTimeMonthly = False
industryWithdrawalvarname = indWW
industryConsuptionvarname = indCon

uselivestock = True
livestockWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_liv_year_millionm3_5min_1961_2010.nc

livestockTimeMonthly = False  
livestockvarname = livestockConsumption

#irrNonPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
#irrPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc

# using environmental flow (EF) (per month) as input value
# EF will be treated as one part of overall water demand
use_environflow = False
EnvironmentalFlowFile = $(FILE_PATHS:PathOut)/MQ90_12month.nc

irrNonPaddy_efficiency = 0.8
irrPaddy_efficiency = 0.8
irrigation_returnfraction = 0.5

#swAbstractionFraction_Channel_Domestic = 1
#swAbstractionFraction_Channel_Livestock = 1
#swAbstractionFraction_Channel_Industry = 1
#swAbstractionFraction_Channel_Irrigation = 1

#swAbstractionFraction_Lift_Domestic = 0
#swAbstractionFraction_Lift_Livestock = 0
#swAbstractionFraction_Lift_Industry = 0
#swAbstractionFraction_Lift_Irrigation = 0

#swAbstractionFraction_Lake_Domestic = 1
#swAbstractionFraction_Lake_Livestock = 1
#swAbstractionFraction_Lake_Industry = 1
#swAbstractionFraction_Lake_Irrigation = 1

#swAbstractionFraction_Res_Domestic = 1
#swAbstractionFraction_Res_Livestock = 1
#swAbstractionFraction_Res_Industry = 1
#swAbstractionFraction_Res_Irrigation = 1

#gwAbstractionFraction_Domestic = 1
#gwAbstractionFraction_Livestock = 1
#gwAbstractionFraction_Industry = 1
#gwAbstractionFraction_Irrigation = 1

# -----------------------------------------------------------
# Estimate of fractions of groundwater and surface water abstractions
# Either a fixed fraction for surface water abstration
# based on fraction of average baseflow and upstream average discharge 
# if swAbstractionFrac < 0: fraction is taken from baseflow / discharge 
# if swAbstractionFrac > 0 this value is taken as a fixed value 
swAbstractionFrac = 0.9
averageDischarge = $(FILE_PATHS:PathOut)/discharge_totalavg.nc
# in [m3/s]
averageBaseflow  = $(FILE_PATHS:PathOut)/baseflow_totalavg.nc
# in [m3/s]
baseflowInM = True
# if baseflow is in [m] instead of [m3/s] it will be converted


#-------------------------------------------------------
# ROUTING MAPS and PARAMETERS
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps)/routing

# Number of substep per day
# should be 10 for 0.5 deg but 24 for 0.1 deg

NoRoutingSteps = 10
#kinematic wave parameter: 0.6 is for broad sheet flow
chanBeta = 0.6

# Channel gradient (fraction, dy/dx)
chanGrad = $(PathRouting)/kinematic/changradient.nc
# Minimum channel gradient (for kin. wave: slope cannot be 0)
chanGradMin = 0.0001

#Channel Manning's n
chanMan = $(PathRouting)/kinematic/chanmanning.nc
#Channel length [meters]
chanLength = $(PathRouting)/kinematic/chanlength.nc
#Channel bottom width [meters]
chanWidth = $(PathRouting)/kinematic/chanwidth.nc
#Bankfull channel depth [meters]
chanDepth = $(PathRouting)/kinematic/chanheight.nc

# initial conditions: channelStorageIni, riverbedExchangeIni, dischargeIni  

#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakesRes = $(FILE_PATHS:PathMaps)/routing/lakesreservoirs

# Use reservoirs and lakes (otherwise use only lakes Lake ID=1 and 3 => natural conditions)
useResAndLakes = True
# Reservoirs do have a year of implementation
dynamicLakesRes = True
# if Reservoirs does not have a year of implemtation, which year should be taken as fixed year
fixLakesResYear = 1950


#----------------------------
#Big lakes and Reservoirs

# ID of every lake, reservoir from HydroLakes database
waterBodyID = $(PathLakesRes)/lakesResID.nc
# 1 for lake, 2 for reservoir, 3 for lake and reservoir
waterBodyTyp = $(PathLakesRes)/lakesResType.nc
# Avergae discharge from HydroLakes Database
waterBodyDis = $(PathLakesRes)/lakesResDis.nc

# Lakes surface area from HydroLakes Database 
waterBodyArea = $(PathLakesRes)/lakesResArea.nc
# a factor to scale the outlet of a lake
#lakeAFactor = 1.0  -> calibration

# Create a buffer around water bodies as command areas for lakes and reservoirs
buffer_waterbodies = 2
#----------------------------
# Small lakes and reservoirs

useSmallLakes = True

smallLakesRes = $(PathLakesRes)/smallLakesRes.nc
smallwaterBodyDis = $(PathLakesRes)/smallLakesResDis.nc

#------------------
# Reservoirs
# reservoir volume from HydroLakes database
waterBodyVolRes = $(PathLakesRes)/lakesResVolRes.nc
# reservoir starting year from HydroLakes database 
waterBodyYear = $(PathLakesRes)/lakesResYear.nc

#  Conservative, normal and flood storage limit (fraction of total storage, [-])
conservativeStorageLimit = 0.1
#normalStorageLimit = 0.5   # --> put into calibration
floodStorageLimit = 0.9
# adjusting the balance between normal and flood storage
# [0 ..1]  0: NormalstorageLimit      1: (= closer to flood) results in keeping the normal qoutflow longer constant
adjust_Normal_Flood = 0.5

# Minimum, Normal and Non-damaging reservoir outflow  (fraction of average discharge, [-])
MinOutflowQ = 0.2
NormalOutflowQ = 1.0
NonDamagingOutflowQ = 4.0

# initial conditions: lakeInflowIni, lakeStorageIni, outLakeIni, lakeOutflowIni, reservoirStorageIni 


#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints
In_Dir = $(FILE_PATHS:PathRoot)/in

# nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(In_Dir)/in.map
#InflowPoints = 8.25 49.75 7.75 50.25

# if InflowPoints is a map, this flag is to identify if it is global (False) or local (True)
# observed or simulated input hydrographs as time series [cu m / s]
# Note: that identifiers in time series have to correspond to InflowPoints
# can be several timeseries in one file or different files e.g. main.tss mosel.tss
#QInTS = main1.tss mosel1.tss
QInTS = mm.tss



#-------------------------------------------------------
[ENVIRONMENTALFLOW]
#-------------------------------------------------------

# Either calculate without run with predone discharge (set calc_ef_after = False)
calc_ef_after = True
# Or calculate after run (set calc_ef_after = False) and defining the file to be used
EFDis = $(FILE_PATHS:PathOut)/discharge_rhine.nc

# if predone discharge, do the maps need to be cut to fit to the mask?
cut_ef_map = False

# MAF: Mean, Q90: percentile 90, MMF: monthly average, MQ90: monthly Q90 9averagwed over al Jan, Feb..
# EF_VMF: Environmental flow - variable monthly flow, EF_VMF_LIH - EF- variable monthly flow, high intermediate, low class
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Once = MAF, Q90
#OUT_MAP_12month = MMF, MQ90, EF_VMF, EF_VMF_LIH
#OUT_MAP_12month = MQ90, EF_VMF



#+++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++


[OUTPUT]

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)

#OUT_TSS_Daily = discharge
#OUT_TSS_MonthAvg = discharge
#OUT_TSS_AnnualAvg = discharge

#OUT_Map_Daily = discharge
#OUT_Map_MonthAvg = discharge, precipitation, runoff
#OUT_Map_AnnualAvg = discharge
#OUT_MAP_TotalAvg = wsirr, wfcirr, wwpirr

#OUT_MAP_Daily = sum_gwRecharge, runoff ,readAvlStorGroundwater, discharge
OUT_MAP_Daily = discharge, runoff, rootzoneSM, sum_gwRecharge, EWRef
#OUT_MAP_TotalEnd = ws1irr, ws2irr, wfc1irr, wfc2irr, wwp1irr, wwp2irr


